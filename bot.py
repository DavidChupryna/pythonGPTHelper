import logging
import telebot
from config import token
from data import load_user_data, save_user_data
from gpt import send_request

bot = telebot.TeleBot(token=token)

data_path = 'users.json'
user_data = load_user_data(data_path)


@bot.message_handler(commands=['start'])
def say_start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø GPT —Ö–µ–ª–ø–µ—Ä –ø–æ —è–∑—ã–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Pythonüêç. \n"
                                      "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–∑–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å –±–æ—Ç–æ–º, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help")
    logging.info("Say start")
    user_id = str(message.from_user.id)
    if user_id not in user_data:
        user_data[user_id] = {}
        user_data[user_id]['username'] = message.from_user.first_name
        save_user_data(user_data, data_path)
    elif user_id in user_data:
        bot.send_message(message.chat.id,f"{message.from_user.first_name} —Ä–∞–¥ –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å!")


@bot.message_handler(commands=['help'])
def say_help(message):
    bot.send_message(message.chat.id, "–Ø GPT —Ö–µ–ª–ø–µ—Ä –ø–æ —è–∑—ã–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python, –∞ —Ç–∞–∫–∂–µ —Ö–æ—Ä–æ—à–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é.\n"
                                      "–í –±–æ—Ç–µ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å, –Ω–µ —Ä–∞—Å—Å–ø–∏—Å—ã–≤–∞–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã.\n"
                                      "–ù–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ç–≤–µ—á–∞–µ—Ç —á–∞—Å—Ç—è–º–∏ –∏ –µ—Å–ª–∏ —Ç–µ–±–µ –º–∞–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å "
                                      "—á—Ç–æ-—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç ('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ø—Ä–æ–¥–æ–ª–∂–∏', '–ø—Ä–æ–¥–æ–ª–∂–∏ –æ—Ç–≤–µ—Ç', 'next', '–¥–∞–ª–µ–µ')\n"
                                      "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: \n"
                                      "/start - –Ω–∞—á–∞—Ç—å –≤—Å–µ —Å–Ω–∞—á–∞–ª–∞.\n"
                                      "/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.\n"
                                      "/start_gpt - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.")


@bot.message_handler(commands=['debug'])
def send_logs(message):
    with open("log_file.txt", "rb") as f:
        bot.send_document(message.chat.id, f)
        logging.info("Use command DEBUG")


@bot.message_handler(commands=['start_gpt'])
def start_gpt(message):
    user_id = message.from_user.id
    bot.send_message(user_id, f"{message.from_user.first_name} c–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.")
    bot.register_next_step_handler(message, send_task)


def send_task(message):
    user_id = message.from_user.id
    user_prompt = message.text.lower()
    if user_prompt in ['/start', '/help', '/debug']:
        bot.send_message(user_id, "–í —Ä–µ–∂–∏–º–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ: \n"
                                  "/start \n"
                                  "/help ")
        return
    gpt_response = send_request(user_prompt)
    logging.info("Send task to GPT")
    if gpt_response:
        if gpt_response == "":
            bot.send_message(user_id, "–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞–Ω. –ó–∞–¥–∞–π—Ç–µ —Å–ª–µ—É—é—â–∏–π!")
        else:
            bot.send_message(user_id, gpt_response)
            bot.send_message(user_id, "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞, –Ω–∞–ø–∏—à–∏: '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –∏–ª–∏ '–¥–∞–ª–µ–µ'.")
            logging.info("GPT send answer")
    else:
        bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    bot.register_next_step_handler(message, send_task)


@bot.message_handler(content_types=['text'])
def solve_task_not_running(message):
    bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start_gpt")


bot.polling()