import logging
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from config import token
from database import create_table, update_data, insert_data, get_data, delete_data
from gpt import send_request, select_system_role

bot = telebot.TeleBot(token=token)


def create_buttons(list_buttons: list):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    for button in list_buttons:
        keyboard.add(KeyboardButton(button))

    return keyboard


@bot.message_handler(commands=['start'])
def say_start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø GPT —Ö–µ–ª–ø–µ—Ä –ø–æ —è–∑—ã–∫–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Pythonüêç –∏ JavaScript. \n"
                                      "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–∑–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å –±–æ—Ç–æ–º, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help")

    logging.info("Say start")
    create_table()


@bot.message_handler(commands=['help'])
def say_help(message):
    bot.send_message(message.chat.id, "–Ø GPT —Ö–µ–ª–ø–µ—Ä –ø–æ —è–∑—ã–∫–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python –∏ JavaScript, –∞ —Ç–∞–∫–∂–µ —Ö–æ—Ä–æ—à–∏–π –ø–æ–º–æ—à–Ω–∏–∫.\n"
                                      "–í –±–æ—Ç–µ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å, –Ω–µ —Ä–∞—Å—Å–ø–∏—Å—ã–≤–∞–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã.\n"
                                      "–ù–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ç–≤–µ—á–∞–µ—Ç —á–∞—Å—Ç—è–º–∏ –∏ –µ—Å–ª–∏ —Ç–µ–±–µ –º–∞–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å "
                                      "—á—Ç–æ-—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç ('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ø—Ä–æ–¥–æ–ª–∂–∏', '–ø—Ä–æ–¥–æ–ª–∂–∏ –æ—Ç–≤–µ—Ç', 'next', '–¥–∞–ª–µ–µ')\n"
                                      "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: \n"
                                      "/start - –Ω–∞—á–∞—Ç—å –≤—Å–µ —Å–Ω–∞—á–∞–ª–∞.\n"
                                      "/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.\n"
                                      "/start_gpt - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.\n"
                                      "/stop - –æ—Å—Ç–æ–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å GPT")


@bot.message_handler(commands=['debug'])
def send_logs(message):
    with open("log_file.txt", "rb") as f:
        bot.send_document(message.chat.id, f)
        logging.info("Use command DEBUG")


@bot.message_handler(commands=['start_gpt'])
def choice_subject(message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    delete_data(user_id)
    keyboard = create_buttons(['Python', 'JavaScript'])
    insert_data(user_id, user_name)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.',
                     reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text in ['Python', 'JavaScript'])
def select_level(message):
    user_id = message.from_user.id
    keyboard = create_buttons(['–ù–∞—á–∞–ª—å–Ω—ã–π', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'])
    bot.send_message(message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç {message.text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è',
                     reply_markup=keyboard)
    subject = message.text
    update_data(user_id, 'subject', subject)


@bot.message_handler(func=lambda message: message.text in ['–ù–∞—á–∞–ª—å–Ω—ã–π', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'])
def solve_task(message):
    user_id = message.from_user.id
    level = message.text
    bot.send_message(user_id, f"{message.from_user.first_name}, –≤—ã –≤—ã–±—Ä–∞–ª–∏ {level} —É—Ä–æ–≤–µ–Ω—å. –°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º "
                              f"–Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.",
                     reply_markup=ReplyKeyboardRemove())
    update_data(user_id, 'level', level)
    bot.register_next_step_handler(message, send_task)


def send_task(message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name

    user_prompt = message.text.lower()
    user = get_data()
    role = select_system_role(user['subject'], user['level'])

    if user_prompt in ['/start', '/help', '/debug', '/start_gpt']:
        bot.send_message(user_id, "–í —Ä–µ–∂–∏–º–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ: \n"
                                  "/start \n"
                                  "/help ")
        return
    elif user_prompt == '/stop':
        bot.send_message(user_id, '–ù–µ–π—Ä–æ—Å–µ—Ç—å –∑–∞–∫–æ–Ω—á–∏–ª–∞ —Ä–∞–±–æ—Ç—É. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞–Ω–æ–≤–æ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π '
                                  '/start_gpt')
        return

    gpt_response = send_request(user_prompt, role)
    insert_data(user_id, user_name, user['subject'], user['level'], user_prompt, gpt_response)
    logging.info("Send task to GPT")

    if gpt_response:
        if gpt_response == "":
            bot.send_message(user_id, "–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞–Ω. –ó–∞–¥–∞–π—Ç–µ —Å–ª–µ—É—é—â–∏–π!")
        else:
            bot.send_message(user_id, gpt_response)
            bot.send_message(user_id, f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞, –Ω–∞–ø–∏—à–∏: '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –∏–ª–∏ '–¥–∞–ª–µ–µ'.\n"
                                      f"–ê –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–µ—Ç–µ –µ–≥–æ –≤ —á–∞—Ç!.")
            logging.info("GPT send answer")
    else:
        bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    bot.register_next_step_handler(message, send_task)


@bot.message_handler(content_types=['text'])
def solve_task_not_running(message):
    bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start_gpt")


bot.polling()